{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "323abac4",
   "metadata": {},
   "source": [
    "<h1>Database mid term</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6275c2d1",
   "metadata": {},
   "source": [
    "<h1>Data cleaning</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "156d399d",
   "metadata": {},
   "source": [
    "<h3>Cleaning the rotten_tomatoes dataset and droping some columns that are not required.</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "999339fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4aee97df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'title', 'audienceScore', 'tomatoMeter', 'rating',\n",
       "       'ratingContents', 'releaseDateTheaters', 'releaseDateStreaming',\n",
       "       'runtimeMinutes', 'genre', 'originalLanguage', 'director', 'writer',\n",
       "       'boxOffice', 'distributor', 'soundMix'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotten_tomatoes = pd.read_csv('rotten_tomatoes.csv')\n",
    "rotten_tomatoes.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ebed95b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 143258 entries, 0 to 143257\n",
      "Data columns (total 16 columns):\n",
      " #   Column                Non-Null Count   Dtype  \n",
      "---  ------                --------------   -----  \n",
      " 0   id                    143258 non-null  object \n",
      " 1   title                 142891 non-null  object \n",
      " 2   audienceScore         73248 non-null   float64\n",
      " 3   tomatoMeter           33877 non-null   float64\n",
      " 4   rating                13991 non-null   object \n",
      " 5   ratingContents        13991 non-null   object \n",
      " 6   releaseDateTheaters   30773 non-null   object \n",
      " 7   releaseDateStreaming  79420 non-null   object \n",
      " 8   runtimeMinutes        129431 non-null  float64\n",
      " 9   genre                 132175 non-null  object \n",
      " 10  originalLanguage      129400 non-null  object \n",
      " 11  director              139064 non-null  object \n",
      " 12  writer                90116 non-null   object \n",
      " 13  boxOffice             14743 non-null   object \n",
      " 14  distributor           23005 non-null   object \n",
      " 15  soundMix              15917 non-null   object \n",
      "dtypes: float64(3), object(13)\n",
      "memory usage: 17.5+ MB\n"
     ]
    }
   ],
   "source": [
    "rotten_tomatoes.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85f669a0",
   "metadata": {},
   "source": [
    "<body>I am deleting the columns 'boxoffice', 'soundmix', 'releaseDateStreaming', and 'releaseDateTheaters' from the dataset. These columns are not relevant for providing answers to my questions. </body>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e6dde152",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'title', 'audienceScore', 'tomatoMeter', 'rating',\n",
       "       'runtimeMinutes', 'genre', 'originalLanguage', 'director', 'writer',\n",
       "       'distributor'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delete_columns = ['boxOffice','soundMix','ratingContents','releaseDateStreaming','releaseDateTheaters']\n",
    "rotten_tomatoes = rotten_tomatoes.drop(columns=delete_columns, axis=1)\n",
    "rotten_tomatoes.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "91dcc700",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>audienceScore</th>\n",
       "      <th>tomatoMeter</th>\n",
       "      <th>rating</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>language</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>space-zombie-bingo</td>\n",
       "      <td>Space Zombie Bingo!</td>\n",
       "      <td>50.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Comedy, Horror, Sci-fi</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>George Ormrod,John Sabotta</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>the_green_grass</td>\n",
       "      <td>The Green Grass</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>English</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>love_lies</td>\n",
       "      <td>Love, Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Korean</td>\n",
       "      <td>Park Heung-Sik,Heung-Sik Park</td>\n",
       "      <td>Ha Young-Joon,Jeon Yun-su,Song Hye-jin</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>the_sore_losers_1997</td>\n",
       "      <td>Sore Losers</td>\n",
       "      <td>60.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "      <td>Action, Mystery &amp; thriller</td>\n",
       "      <td>English</td>\n",
       "      <td>John Michael McCarthy</td>\n",
       "      <td>John Michael McCarthy</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>dinosaur_island_2002</td>\n",
       "      <td>Dinosaur Island</td>\n",
       "      <td>70.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.0</td>\n",
       "      <td>Fantasy, Adventure, Animation</td>\n",
       "      <td>English</td>\n",
       "      <td>Will Meugniot</td>\n",
       "      <td>John Loy</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               title_id                title  audienceScore  tomatoMeter  \\\n",
       "0    space-zombie-bingo  Space Zombie Bingo!           50.0          NaN   \n",
       "1       the_green_grass      The Green Grass            NaN          NaN   \n",
       "2             love_lies           Love, Lies           43.0          NaN   \n",
       "3  the_sore_losers_1997          Sore Losers           60.0          NaN   \n",
       "4  dinosaur_island_2002      Dinosaur Island           70.0          NaN   \n",
       "\n",
       "  rating  runtime                          genre language  \\\n",
       "0    NaN     75.0         Comedy, Horror, Sci-fi  English   \n",
       "1    NaN    114.0                          Drama  English   \n",
       "2    NaN    120.0                          Drama   Korean   \n",
       "3    NaN     90.0     Action, Mystery & thriller  English   \n",
       "4    NaN     80.0  Fantasy, Adventure, Animation  English   \n",
       "\n",
       "                        director                                  writer  \\\n",
       "0                  George Ormrod              George Ormrod,John Sabotta   \n",
       "1                Tiffany Edwards                         Tiffany Edwards   \n",
       "2  Park Heung-Sik,Heung-Sik Park  Ha Young-Joon,Jeon Yun-su,Song Hye-jin   \n",
       "3          John Michael McCarthy                   John Michael McCarthy   \n",
       "4                  Will Meugniot                                John Loy   \n",
       "\n",
       "  distributor  \n",
       "0         NaN  \n",
       "1         NaN  \n",
       "2         NaN  \n",
       "3         NaN  \n",
       "4         NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotten_tomatoes.rename(columns={\"originalLanguage\": \"languages\"}, inplace=True)\n",
    "rotten_tomatoes.rename(columns={\"runtimeMinutes\": \"runtime\"}, inplace=True)\n",
    "rotten_tomatoes.rename(columns={\"id\": \"title_id\"}, inplace=True)\n",
    "rotten_tomatoes.rename(columns={\"languages\": \"language\"}, inplace=True)\n",
    "rotten_tomatoes.rename(columns={\"languages\": \"language\"}, inplace=True)\n",
    "\n",
    "rotten_tomatoes.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5eab36f",
   "metadata": {},
   "source": [
    "<h3>Spliting the columns that are not single valued. </h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca0aa33c",
   "metadata": {},
   "source": [
    "<h4>These columns are director, genre, writer, distributor </h4>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1331aed",
   "metadata": {},
   "source": [
    "<body>Even though the data types of the columns are marked as \"object\", the split function cannot be performed if there are NaN values present. This error occurs because the split function expects a string as input, and NaN values cannot be split. Therefore, it is important to handle these missing values appropriately before applying the split operation.To resolve this issue, I will be replacing NaN values with empty strings.</body>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c3360d32",
   "metadata": {},
   "outputs": [],
   "source": [
    "list_columns=['audienceScore','tomatoMeter','rating','runtime','genre','language','director','writer','distributor']\n",
    "rotten_tomatoes[list_columns] = rotten_tomatoes[list_columns].fillna('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "322541c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>audienceScore</th>\n",
       "      <th>tomatoMeter</th>\n",
       "      <th>rating</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>language</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>space-zombie-bingo</td>\n",
       "      <td>Space Zombie Bingo!</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>[Comedy,  Horror,  Sci-fi]</td>\n",
       "      <td>English</td>\n",
       "      <td>[George Ormrod]</td>\n",
       "      <td>[George Ormrod, John Sabotta]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>the_green_grass</td>\n",
       "      <td>The Green Grass</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>114.0</td>\n",
       "      <td>[Drama]</td>\n",
       "      <td>English</td>\n",
       "      <td>[Tiffany Edwards]</td>\n",
       "      <td>[Tiffany Edwards]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>love_lies</td>\n",
       "      <td>Love, Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>120.0</td>\n",
       "      <td>[Drama]</td>\n",
       "      <td>Korean</td>\n",
       "      <td>[Park Heung-Sik, Heung-Sik Park]</td>\n",
       "      <td>[Ha Young-Joon, Jeon Yun-su, Song Hye-jin]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>the_sore_losers_1997</td>\n",
       "      <td>Sore Losers</td>\n",
       "      <td>60.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>90.0</td>\n",
       "      <td>[Action,  Mystery &amp; thriller]</td>\n",
       "      <td>English</td>\n",
       "      <td>[John Michael McCarthy]</td>\n",
       "      <td>[John Michael McCarthy]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>dinosaur_island_2002</td>\n",
       "      <td>Dinosaur Island</td>\n",
       "      <td>70.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>80.0</td>\n",
       "      <td>[Fantasy,  Adventure,  Animation]</td>\n",
       "      <td>English</td>\n",
       "      <td>[Will Meugniot]</td>\n",
       "      <td>[John Loy]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               title_id                title audienceScore tomatoMeter rating  \\\n",
       "0    space-zombie-bingo  Space Zombie Bingo!          50.0                      \n",
       "1       the_green_grass      The Green Grass                                    \n",
       "2             love_lies           Love, Lies          43.0                      \n",
       "3  the_sore_losers_1997          Sore Losers          60.0                      \n",
       "4  dinosaur_island_2002      Dinosaur Island          70.0                      \n",
       "\n",
       "  runtime                              genre language  \\\n",
       "0    75.0         [Comedy,  Horror,  Sci-fi]  English   \n",
       "1   114.0                            [Drama]  English   \n",
       "2   120.0                            [Drama]   Korean   \n",
       "3    90.0      [Action,  Mystery & thriller]  English   \n",
       "4    80.0  [Fantasy,  Adventure,  Animation]  English   \n",
       "\n",
       "                           director  \\\n",
       "0                   [George Ormrod]   \n",
       "1                 [Tiffany Edwards]   \n",
       "2  [Park Heung-Sik, Heung-Sik Park]   \n",
       "3           [John Michael McCarthy]   \n",
       "4                   [Will Meugniot]   \n",
       "\n",
       "                                       writer distributor  \n",
       "0               [George Ormrod, John Sabotta]          []  \n",
       "1                           [Tiffany Edwards]          []  \n",
       "2  [Ha Young-Joon, Jeon Yun-su, Song Hye-jin]          []  \n",
       "3                     [John Michael McCarthy]          []  \n",
       "4                                  [John Loy]          []  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotten_tomatoes['genre'] = rotten_tomatoes[\"genre\"].apply(lambda x: x.split(\",\"))\n",
    "rotten_tomatoes['director'] = rotten_tomatoes[\"director\"].apply(lambda x: x.split(\",\"))\n",
    "rotten_tomatoes['writer'] = rotten_tomatoes[\"writer\"].apply(lambda x: x.split(\",\"))\n",
    "rotten_tomatoes['distributor'] = rotten_tomatoes[\"distributor\"].apply(lambda x: x.split(\",\"))\n",
    "rotten_tomatoes.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d9cf0b8",
   "metadata": {},
   "source": [
    "In order to ensure that the language filters only recognize the language and not the region, it is necessary to remove the brackets indicating the part of the language used in the movie. Only the language itself should be considered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8452b63a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35            English\n",
       "36            English\n",
       "37            English\n",
       "38            English\n",
       "39            English\n",
       "40            Spanish\n",
       "41            English\n",
       "42    French (Canada)\n",
       "43            Chinese\n",
       "44                   \n",
       "Name: language, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotten_tomatoes['language'].iloc[35:45]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fe617bf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35    English\n",
       "36    English\n",
       "37    English\n",
       "38    English\n",
       "39    English\n",
       "40    Spanish\n",
       "41    English\n",
       "42    French \n",
       "43    Chinese\n",
       "44           \n",
       "Name: language, dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotten_tomatoes['language'] = rotten_tomatoes['language'].astype(str)\n",
    "rotten_tomatoes['language'] = rotten_tomatoes['language'].apply(lambda x: re.sub(\"\\(.*?\\)|\\[.*?\\]\",\"\",x))\n",
    "rotten_tomatoes['language'].iloc[35:45]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e19e2e7",
   "metadata": {},
   "source": [
    "I also found out that the movie titles contains some special characters so they needed to be removed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c24b7b96",
   "metadata": {},
   "outputs": [],
   "source": [
    "rotten_tomatoes['title']=rotten_tomatoes['title'].astype(str)\n",
    "rotten_tomatoes['title'] =rotten_tomatoes['title'].apply(lambda x:re.sub(r'[^a-zA-Z0-9\\s]+', '', x))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a2981a8",
   "metadata": {},
   "source": [
    "I have found out that there are duplicate entries in the \"title_id\" field, leading to non-unique records. In order to resolve this issue, I have implemented an auto-incrementing integer for the \"title_id\" column, ensuring that each record has a unique identifier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c8d6dea0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>audienceScore</th>\n",
       "      <th>tomatoMeter</th>\n",
       "      <th>rating</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>language</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>[Comedy,  Horror,  Sci-fi]</td>\n",
       "      <td>English</td>\n",
       "      <td>[George Ormrod]</td>\n",
       "      <td>[George Ormrod, John Sabotta]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>The Green Grass</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>114.0</td>\n",
       "      <td>[Drama]</td>\n",
       "      <td>English</td>\n",
       "      <td>[Tiffany Edwards]</td>\n",
       "      <td>[Tiffany Edwards]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>120.0</td>\n",
       "      <td>[Drama]</td>\n",
       "      <td>Korean</td>\n",
       "      <td>[Park Heung-Sik, Heung-Sik Park]</td>\n",
       "      <td>[Ha Young-Joon, Jeon Yun-su, Song Hye-jin]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Sore Losers</td>\n",
       "      <td>60.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>90.0</td>\n",
       "      <td>[Action,  Mystery &amp; thriller]</td>\n",
       "      <td>English</td>\n",
       "      <td>[John Michael McCarthy]</td>\n",
       "      <td>[John Michael McCarthy]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Dinosaur Island</td>\n",
       "      <td>70.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>80.0</td>\n",
       "      <td>[Fantasy,  Adventure,  Animation]</td>\n",
       "      <td>English</td>\n",
       "      <td>[Will Meugniot]</td>\n",
       "      <td>[John Loy]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Adrift</td>\n",
       "      <td>65.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>PG-13</td>\n",
       "      <td>120.0</td>\n",
       "      <td>[Adventure,  Drama,  Romance]</td>\n",
       "      <td>English</td>\n",
       "      <td>[Baltasar Kormákur]</td>\n",
       "      <td>[Aaron Kandell, Jordan Kandell, David Branson ...</td>\n",
       "      <td>[STX Films]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Scrambled Beer</td>\n",
       "      <td>55.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>88.0</td>\n",
       "      <td>[Comedy]</td>\n",
       "      <td>Spanish</td>\n",
       "      <td>[Cristobal Valderrama]</td>\n",
       "      <td>[Cristobal Valderrama]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>Kakabakaba ka ba Will Your Heart Beat Faster</td>\n",
       "      <td>88.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>[]</td>\n",
       "      <td></td>\n",
       "      <td>[Mike de Leon]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Sundowning</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>123.0</td>\n",
       "      <td>[Drama]</td>\n",
       "      <td>English</td>\n",
       "      <td>[Jim Comas Cole]</td>\n",
       "      <td>[]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Born to Kill</td>\n",
       "      <td>74.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td></td>\n",
       "      <td>92.0</td>\n",
       "      <td>[Crime,  Drama]</td>\n",
       "      <td>English</td>\n",
       "      <td>[Robert Wise]</td>\n",
       "      <td>[Eve Greene, Richard Macaulay]</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   title_id                                         title audienceScore  \\\n",
       "0         1                            Space Zombie Bingo          50.0   \n",
       "1         2                               The Green Grass                 \n",
       "2         3                                     Love Lies          43.0   \n",
       "3         4                                   Sore Losers          60.0   \n",
       "4         5                               Dinosaur Island          70.0   \n",
       "5         6                                        Adrift          65.0   \n",
       "6         7                                Scrambled Beer          55.0   \n",
       "7         8  Kakabakaba ka ba Will Your Heart Beat Faster          88.0   \n",
       "8         9                                    Sundowning                 \n",
       "9        10                                  Born to Kill          74.0   \n",
       "\n",
       "  tomatoMeter rating runtime                              genre language  \\\n",
       "0                       75.0         [Comedy,  Horror,  Sci-fi]  English   \n",
       "1                      114.0                            [Drama]  English   \n",
       "2                      120.0                            [Drama]   Korean   \n",
       "3                       90.0      [Action,  Mystery & thriller]  English   \n",
       "4                       80.0  [Fantasy,  Adventure,  Animation]  English   \n",
       "5        69.0  PG-13   120.0      [Adventure,  Drama,  Romance]  English   \n",
       "6                       88.0                           [Comedy]  Spanish   \n",
       "7                                                            []            \n",
       "8                      123.0                            [Drama]  English   \n",
       "9        83.0           92.0                    [Crime,  Drama]  English   \n",
       "\n",
       "                           director  \\\n",
       "0                   [George Ormrod]   \n",
       "1                 [Tiffany Edwards]   \n",
       "2  [Park Heung-Sik, Heung-Sik Park]   \n",
       "3           [John Michael McCarthy]   \n",
       "4                   [Will Meugniot]   \n",
       "5               [Baltasar Kormákur]   \n",
       "6            [Cristobal Valderrama]   \n",
       "7                    [Mike de Leon]   \n",
       "8                  [Jim Comas Cole]   \n",
       "9                     [Robert Wise]   \n",
       "\n",
       "                                              writer  distributor  \n",
       "0                      [George Ormrod, John Sabotta]           []  \n",
       "1                                  [Tiffany Edwards]           []  \n",
       "2         [Ha Young-Joon, Jeon Yun-su, Song Hye-jin]           []  \n",
       "3                            [John Michael McCarthy]           []  \n",
       "4                                         [John Loy]           []  \n",
       "5  [Aaron Kandell, Jordan Kandell, David Branson ...  [STX Films]  \n",
       "6                             [Cristobal Valderrama]           []  \n",
       "7                                                 []           []  \n",
       "8                                                 []           []  \n",
       "9                     [Eve Greene, Richard Macaulay]           []  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotten_tomatoes['title_id'] = [x for x in range(1, len(rotten_tomatoes.values) + 1)]\n",
    "rotten_tomatoes.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "58c85ae0",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>audienceScore</th>\n",
       "      <th>tomatoMeter</th>\n",
       "      <th>rating</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>language</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>John Sabotta</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>Horror</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>Horror</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>John Sabotta</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>Sci-fi</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>75.0</td>\n",
       "      <td>Sci-fi</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>John Sabotta</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>The Green Grass</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>114.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>English</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>120.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Korean</td>\n",
       "      <td>Park Heung-Sik</td>\n",
       "      <td>Ha Young-Joon</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>120.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Korean</td>\n",
       "      <td>Park Heung-Sik</td>\n",
       "      <td>Jeon Yun-su</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>120.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Korean</td>\n",
       "      <td>Park Heung-Sik</td>\n",
       "      <td>Song Hye-jin</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   title_id               title audienceScore tomatoMeter rating runtime  \\\n",
       "0         1  Space Zombie Bingo          50.0                       75.0   \n",
       "0         1  Space Zombie Bingo          50.0                       75.0   \n",
       "0         1  Space Zombie Bingo          50.0                       75.0   \n",
       "0         1  Space Zombie Bingo          50.0                       75.0   \n",
       "0         1  Space Zombie Bingo          50.0                       75.0   \n",
       "0         1  Space Zombie Bingo          50.0                       75.0   \n",
       "1         2     The Green Grass                                    114.0   \n",
       "2         3           Love Lies          43.0                      120.0   \n",
       "2         3           Love Lies          43.0                      120.0   \n",
       "2         3           Love Lies          43.0                      120.0   \n",
       "\n",
       "     genre language         director           writer distributor  \n",
       "0   Comedy  English    George Ormrod    George Ormrod              \n",
       "0   Comedy  English    George Ormrod     John Sabotta              \n",
       "0   Horror  English    George Ormrod    George Ormrod              \n",
       "0   Horror  English    George Ormrod     John Sabotta              \n",
       "0   Sci-fi  English    George Ormrod    George Ormrod              \n",
       "0   Sci-fi  English    George Ormrod     John Sabotta              \n",
       "1    Drama  English  Tiffany Edwards  Tiffany Edwards              \n",
       "2    Drama   Korean   Park Heung-Sik    Ha Young-Joon              \n",
       "2    Drama   Korean   Park Heung-Sik      Jeon Yun-su              \n",
       "2    Drama   Korean   Park Heung-Sik     Song Hye-jin              "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rotten_tomatoes=rotten_tomatoes.explode('director')\n",
    "rotten_tomatoes=rotten_tomatoes.explode('genre')\n",
    "rotten_tomatoes=rotten_tomatoes.explode('writer')\n",
    "rotten_tomatoes=rotten_tomatoes.explode('distributor')\n",
    "rotten_tomatoes.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c55b84c5",
   "metadata": {},
   "source": [
    "Only then, the empty rows are replaced with NaN with the condition of columns that are not data type of integer or float . "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d0cfced9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>audienceScore</th>\n",
       "      <th>tomatoMeter</th>\n",
       "      <th>rating</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genre</th>\n",
       "      <th>language</th>\n",
       "      <th>director</th>\n",
       "      <th>writer</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Comedy</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>John Sabotta</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Horror</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Horror</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>John Sabotta</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Sci-fi</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>50.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Sci-fi</td>\n",
       "      <td>English</td>\n",
       "      <td>George Ormrod</td>\n",
       "      <td>John Sabotta</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>The Green Grass</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>114.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>English</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Korean</td>\n",
       "      <td>Park Heung-Sik</td>\n",
       "      <td>Ha Young-Joon</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Korean</td>\n",
       "      <td>Park Heung-Sik</td>\n",
       "      <td>Jeon Yun-su</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>43.0</td>\n",
       "      <td></td>\n",
       "      <td>NaN</td>\n",
       "      <td>120.0</td>\n",
       "      <td>Drama</td>\n",
       "      <td>Korean</td>\n",
       "      <td>Park Heung-Sik</td>\n",
       "      <td>Song Hye-jin</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   title_id               title audienceScore tomatoMeter rating runtime  \\\n",
       "0         1  Space Zombie Bingo          50.0                NaN    75.0   \n",
       "0         1  Space Zombie Bingo          50.0                NaN    75.0   \n",
       "0         1  Space Zombie Bingo          50.0                NaN    75.0   \n",
       "0         1  Space Zombie Bingo          50.0                NaN    75.0   \n",
       "0         1  Space Zombie Bingo          50.0                NaN    75.0   \n",
       "0         1  Space Zombie Bingo          50.0                NaN    75.0   \n",
       "1         2     The Green Grass                              NaN   114.0   \n",
       "2         3           Love Lies          43.0                NaN   120.0   \n",
       "2         3           Love Lies          43.0                NaN   120.0   \n",
       "2         3           Love Lies          43.0                NaN   120.0   \n",
       "\n",
       "     genre language         director           writer distributor  \n",
       "0   Comedy  English    George Ormrod    George Ormrod         NaN  \n",
       "0   Comedy  English    George Ormrod     John Sabotta         NaN  \n",
       "0   Horror  English    George Ormrod    George Ormrod         NaN  \n",
       "0   Horror  English    George Ormrod     John Sabotta         NaN  \n",
       "0   Sci-fi  English    George Ormrod    George Ormrod         NaN  \n",
       "0   Sci-fi  English    George Ormrod     John Sabotta         NaN  \n",
       "1    Drama  English  Tiffany Edwards  Tiffany Edwards         NaN  \n",
       "2    Drama   Korean   Park Heung-Sik    Ha Young-Joon         NaN  \n",
       "2    Drama   Korean   Park Heung-Sik      Jeon Yun-su         NaN  \n",
       "2    Drama   Korean   Park Heung-Sik     Song Hye-jin         NaN  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columnlist1 = ['title','genre', 'language', 'director', 'writer', 'distributor', 'rating']\n",
    "rotten_tomatoes[columnlist1] = rotten_tomatoes[columnlist1].replace('', np.nan)\n",
    "rotten_tomatoes.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d57f453",
   "metadata": {},
   "source": [
    "<h1>Creating and exporting to CSV file </h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e79aeb07",
   "metadata": {},
   "source": [
    "The cleaned rotten_tomatoes database is saved as csv file. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "97621b60",
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_PATH1='/Users/julie/Desktop/Database_mid_term '\n",
    "rotten_tomatoes.to_csv(f\"{DATA_PATH1}/processed_rotten_tomatoes.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c4b13c1",
   "metadata": {},
   "source": [
    "For the remaining part of the file, I will create suitable dataframes that can be exported as CSV files and then inserted into the corresponding SQL tables. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "067a9957",
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_PATH='/Users/julie/Desktop/database_sub_csvfiles'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89cd1fc7",
   "metadata": {},
   "source": [
    "<h2>Language table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8d5f7549",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>language_id</th>\n",
       "      <th>language</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>English</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Korean</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Spanish</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Tagalog</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>Hindi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>French</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>Japanese</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>Tamil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>Chinese</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>Arabic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    language_id  language\n",
       "0             0   English\n",
       "1             1    Korean\n",
       "2             2   Spanish\n",
       "4             4   Tagalog\n",
       "5             5     Hindi\n",
       "6             6   French \n",
       "7             7  Japanese\n",
       "8             8     Tamil\n",
       "9             9   Chinese\n",
       "10           10    Arabic"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "language = pd.DataFrame(data=rotten_tomatoes['language'].unique(), columns=['language'])\n",
    "language.reset_index(inplace=True)\n",
    "language.columns = ['language_id', 'language']\n",
    "language.dropna(inplace=True)\n",
    "language = language.drop_duplicates(subset=['language'])\n",
    "language.to_csv(f\"{DATA_PATH}/language.csv\", index=False)\n",
    "language.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cbc5da6",
   "metadata": {},
   "source": [
    "<h2>Rating table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ab51a588",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating_id</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PG-13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>TVPG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>R</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>PG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>TV14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>NC-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>TVG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>TVMA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>TVY7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    rating_id rating\n",
       "1           1  PG-13\n",
       "2           2   TVPG\n",
       "3           3      R\n",
       "4           4     PG\n",
       "5           5   TV14\n",
       "6           6  NC-17\n",
       "7           7    TVG\n",
       "8           8   TVMA\n",
       "9           9   TVY7\n",
       "10         10      G"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rating = pd.DataFrame(data=rotten_tomatoes['rating'].unique(), columns=['rating'])\n",
    "rating.reset_index(inplace=True)\n",
    "rating.columns = ['rating_id', 'rating']\n",
    "rating.dropna(inplace=True)\n",
    "rating.to_csv(f\"{DATA_PATH}/rating.csv\", index=False)\n",
    "rating.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f137f866",
   "metadata": {},
   "source": [
    "<h2>Genre table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f1b21c5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>genre_id</th>\n",
       "      <th>genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Horror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Sci-fi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Action</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>Mystery &amp; thriller</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>Fantasy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>Adventure</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>Animation</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>Adventure</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   genre_id                genre\n",
       "0         0               Comedy\n",
       "1         1               Horror\n",
       "2         2               Sci-fi\n",
       "3         3                Drama\n",
       "4         4               Action\n",
       "5         5   Mystery & thriller\n",
       "6         6              Fantasy\n",
       "7         7            Adventure\n",
       "8         8            Animation\n",
       "9         9            Adventure"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "genre = pd.DataFrame(data=rotten_tomatoes['genre'].unique(), columns=['genre'])\n",
    "genre.reset_index(inplace=True)\n",
    "genre.columns = ['genre_id', 'genre']\n",
    "genre.dropna(inplace=True)\n",
    "genre = genre.drop_duplicates(subset='genre')\n",
    "genre.reset_index(drop=True, inplace=True)\n",
    "genre.to_csv(f\"{DATA_PATH}/genre.csv\", index=False)\n",
    "genre.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "586e3745",
   "metadata": {},
   "source": [
    "<h2>Director table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "09a8e7c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>director_id</th>\n",
       "      <th>director</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>George Ormrod</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Park Heung-Sik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Heung-Sik Park</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>John Michael McCarthy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>Will Meugniot</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>Baltasar Kormákur</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>Cristobal Valderrama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>Mike de Leon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>Jim Comas Cole</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   director_id               director\n",
       "0            0          George Ormrod\n",
       "1            1        Tiffany Edwards\n",
       "2            2         Park Heung-Sik\n",
       "3            3         Heung-Sik Park\n",
       "4            4  John Michael McCarthy\n",
       "5            5          Will Meugniot\n",
       "6            6      Baltasar Kormákur\n",
       "7            7   Cristobal Valderrama\n",
       "8            8           Mike de Leon\n",
       "9            9         Jim Comas Cole"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "director = pd.DataFrame(data=rotten_tomatoes['director'].unique(), columns=['director'])\n",
    "director.reset_index(inplace=True)\n",
    "director.columns = ['director_id', 'director']\n",
    "director.dropna(inplace=True)\n",
    "director = director.drop_duplicates(subset='director')\n",
    "director.reset_index(drop=True, inplace=True)\n",
    "director.to_csv(f\"{DATA_PATH}/director.csv\", index=False)\n",
    "director.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6955149",
   "metadata": {},
   "source": [
    "<h2>Distributor table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "039cf463",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>distributor_id</th>\n",
       "      <th>distributor</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>STX Films</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Passport Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Big Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Freestyle Releasing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>Kino Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>Reliance Big Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>Saban Films</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>Outsider Pictures</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>Sony Pictures Entertainment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>20th Century Fox</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    distributor_id                  distributor\n",
       "1                1                    STX Films\n",
       "2                2            Passport Pictures\n",
       "3                3                 Big Pictures\n",
       "4                4          Freestyle Releasing\n",
       "5                5                Kino Pictures\n",
       "6                6        Reliance Big Pictures\n",
       "7                7                  Saban Films\n",
       "8                8            Outsider Pictures\n",
       "9                9  Sony Pictures Entertainment\n",
       "10              10             20th Century Fox"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distributor = pd.DataFrame(data=rotten_tomatoes['distributor'].unique(), columns=['distributor'])\n",
    "distributor.reset_index(inplace=True)\n",
    "distributor.columns = ['distributor_id', 'distributor']\n",
    "distributor.dropna(inplace=True)\n",
    "distributor_unique = distributor.drop_duplicates(subset=['distributor'])\n",
    "distributor.to_csv(f\"{DATA_PATH}/distributor.csv\", index=False)\n",
    "distributor.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42642096",
   "metadata": {},
   "source": [
    "<h2>Writer table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "11ddb8bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>writer_id</th>\n",
       "      <th>writer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>George Ormrod</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>John Sabotta</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Tiffany Edwards</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>Ha Young-Joon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>Jeon Yun-su</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>Song Hye-jin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>John Michael McCarthy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>John Loy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>Aaron Kandell</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>Jordan Kandell</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   writer_id                 writer\n",
       "0          0          George Ormrod\n",
       "1          1           John Sabotta\n",
       "2          2        Tiffany Edwards\n",
       "3          3          Ha Young-Joon\n",
       "4          4            Jeon Yun-su\n",
       "5          5           Song Hye-jin\n",
       "6          6  John Michael McCarthy\n",
       "7          7               John Loy\n",
       "8          8          Aaron Kandell\n",
       "9          9         Jordan Kandell"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "writer = pd.DataFrame(data=rotten_tomatoes['writer'].unique(), columns=['writer'])\n",
    "writer.reset_index(inplace=True)\n",
    "writer.columns = ['writer_id', 'writer']\n",
    "writer.dropna(inplace=True)\n",
    "writer = writer.drop_duplicates(subset='writer')\n",
    "writer.reset_index(drop=True, inplace=True)\n",
    "writer.to_csv(f\"{DATA_PATH}/writer.csv\", index=False)\n",
    "writer.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e958c72",
   "metadata": {},
   "source": [
    "<h2>Category table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e9d1c16c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>genre_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id  genre_id\n",
       "0          1         0\n",
       "2          1         1\n",
       "4          1         2\n",
       "6          2         3\n",
       "7          3         3\n",
       "13         4         4\n",
       "14         4         5\n",
       "15         5         6\n",
       "16         5         7\n",
       "17         5         8"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "category = rotten_tomatoes.merge(genre, how='left', left_on='genre', right_on='genre')\n",
    "category = category[['title_id', 'genre_id']]\n",
    "category['genre_id'] = category['genre_id'].astype(float).astype('Int64')\n",
    "category.drop_duplicates(subset=['title_id', 'genre_id'], inplace=True)\n",
    "category.dropna(inplace=True)\n",
    "category.to_csv(f\"{DATA_PATH}/category.csv\", index=False)\n",
    "category.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9483b325",
   "metadata": {},
   "source": [
    "<h2>Directed_by table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cd46306a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>director_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id  director_id\n",
       "0          1            0\n",
       "6          2            1\n",
       "7          3            2\n",
       "10         3            3\n",
       "13         4            4\n",
       "15         5            5\n",
       "18         6            6\n",
       "27         7            7\n",
       "28         8            8\n",
       "29         9            9"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "directed_by = rotten_tomatoes.merge(director, how='left', left_on='director', right_on='director')\n",
    "directed_by = directed_by[['title_id', 'director_id']]\n",
    "directed_by['director_id'] = directed_by['director_id'].astype(float).astype('Int64')\n",
    "directed_by.drop_duplicates(subset=['title_id', 'director_id'], inplace=True)\n",
    "directed_by.dropna(inplace=True)\n",
    "directed_by.to_csv(f\"{DATA_PATH}/directed_by.csv\", index=False)\n",
    "directed_by.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c79b0782",
   "metadata": {},
   "source": [
    "<h2>written_by table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fe0c0fb0",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>writer_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id  writer_id\n",
       "0          1          0\n",
       "1          1          1\n",
       "6          2          2\n",
       "7          3          3\n",
       "8          3          4\n",
       "9          3          5\n",
       "13         4          6\n",
       "15         5          7\n",
       "18         6          8\n",
       "19         6          9"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "written_by = rotten_tomatoes.merge(writer, how='left', left_on='writer', right_on='writer')\n",
    "written_by = written_by[['title_id', 'writer_id']]\n",
    "written_by['writer_id'] = written_by['writer_id'].astype('Int64')\n",
    "written_by.drop_duplicates(subset=['title_id', 'writer_id'], inplace=True)\n",
    "written_by.dropna(inplace=True)\n",
    "written_by.to_csv(f\"{DATA_PATH}/written_by.csv\", index=False)\n",
    "written_by.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b1abb34",
   "metadata": {},
   "source": [
    "<h2>Distributed_by table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4cbbf2bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>distributor_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>13</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>18</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>21</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>32</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>94</th>\n",
       "      <td>46</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>50</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>74</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>83</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>85</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     title_id  distributor_id\n",
       "18          6               1\n",
       "37         13               2\n",
       "49         18               3\n",
       "52         21               4\n",
       "73         32               5\n",
       "94         46               6\n",
       "114        50               7\n",
       "168        74               8\n",
       "179        83               9\n",
       "182        85              10"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "distributed_by = rotten_tomatoes.merge(distributor, how='left', left_on='distributor', right_on='distributor')\n",
    "distributed_by = distributed_by[['title_id', 'distributor_id']]\n",
    "distributed_by['distributor_id'] = distributed_by['distributor_id'].astype('Int64')\n",
    "distributed_by.drop_duplicates(subset=['title_id', 'distributor_id'], inplace=True)\n",
    "distributed_by.dropna(inplace=True)\n",
    "distributed_by.to_csv(f\"{DATA_PATH}/distributed_by.csv\", index=False)\n",
    "distributed_by.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e12c71e7",
   "metadata": {},
   "source": [
    "<h2>Title table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "1c2f6d90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>runtime</th>\n",
       "      <th>language_id</th>\n",
       "      <th>rating_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Space Zombie Bingo</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2</td>\n",
       "      <td>The Green Grass</td>\n",
       "      <td>114.0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>Love Lies</td>\n",
       "      <td>120.0</td>\n",
       "      <td>1</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4</td>\n",
       "      <td>Sore Losers</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>Dinosaur Island</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6</td>\n",
       "      <td>Adrift</td>\n",
       "      <td>120.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>7</td>\n",
       "      <td>Scrambled Beer</td>\n",
       "      <td>88.0</td>\n",
       "      <td>2</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>8</td>\n",
       "      <td>Kakabakaba ka ba Will Your Heart Beat Faster</td>\n",
       "      <td></td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>9</td>\n",
       "      <td>Sundowning</td>\n",
       "      <td>123.0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>10</td>\n",
       "      <td>Born to Kill</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    title_id                                         title runtime  \\\n",
       "0          1                            Space Zombie Bingo    75.0   \n",
       "6          2                               The Green Grass   114.0   \n",
       "7          3                                     Love Lies   120.0   \n",
       "13         4                                   Sore Losers    90.0   \n",
       "15         5                               Dinosaur Island    80.0   \n",
       "18         6                                        Adrift   120.0   \n",
       "27         7                                Scrambled Beer    88.0   \n",
       "28         8  Kakabakaba ka ba Will Your Heart Beat Faster           \n",
       "29         9                                    Sundowning   123.0   \n",
       "30        10                                  Born to Kill    92.0   \n",
       "\n",
       "   language_id rating_id  \n",
       "0            0      None  \n",
       "6            0      None  \n",
       "7            1      None  \n",
       "13           0      None  \n",
       "15           0      None  \n",
       "18           0         1  \n",
       "27           2      None  \n",
       "28        None      None  \n",
       "29           0      None  \n",
       "30           0      None  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "title = rotten_tomatoes.copy()\n",
    "dropcolumns = ['language', 'audienceScore', 'tomatoMeter', 'genre', 'director', 'writer', 'distributor', 'rating']\n",
    "title = title.merge(language, how='left', left_on='language', right_on='language')\n",
    "title = title.merge(rating, how='left', left_on='rating', right_on='rating')\n",
    "title = title.drop(columns=dropcolumns)\n",
    "\n",
    "\n",
    "title['language_id'] = title['language_id'].astype('Int64')\n",
    "title['rating_id'] = title['rating_id'].astype('Int64')\n",
    "\n",
    "title['rating_id'] = title['rating_id'].astype(str)\n",
    "title['language_id'] = title['language_id'].astype(str)\n",
    "\n",
    "title['rating_id'] = title['rating_id'].apply(lambda x: None if x == \"<NA>\" else x)\n",
    "title['language_id'] = title['language_id'].apply(lambda x: None if x == \"<NA>\" else x)\n",
    "\n",
    "title.drop_duplicates(inplace=True)\n",
    "\n",
    "title.to_csv(f\"{DATA_PATH}/title.csv\", index=False)\n",
    "title.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56ce40d3",
   "metadata": {},
   "source": [
    "<h2>Critics table</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "770dd517",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>critic_id</th>\n",
       "      <th>critic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>audienceScore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>tomatoMeter</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   critic_id         critic\n",
       "0          1  audienceScore\n",
       "1          2    tomatoMeter"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "critic = pd.DataFrame({'critic_id': [1, 2], 'critic': ['audienceScore', 'tomatoMeter']})\n",
    "critic.to_csv(f\"{DATA_PATH}/critic.csv\", index=False)\n",
    "critic.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ca4d5f6",
   "metadata": {},
   "source": [
    "<h2>Score table</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "892ecd76",
   "metadata": {},
   "source": [
    "The audienceScore and tomatoMeter columns of rotten_tomatoes are joined in to a single column called score in score dataframe.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c3aaec44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>title</th>\n",
       "      <th>score_type</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>267876</th>\n",
       "      <td>109796</td>\n",
       "      <td>And They Lived Happily Ever After</td>\n",
       "      <td>audience</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>617089</th>\n",
       "      <td>109796</td>\n",
       "      <td>And They Lived Happily Ever After</td>\n",
       "      <td>tomato</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>554612</th>\n",
       "      <td>83925</td>\n",
       "      <td>Dollars</td>\n",
       "      <td>tomato</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205399</th>\n",
       "      <td>83925</td>\n",
       "      <td>Dollars</td>\n",
       "      <td>audience</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269993</th>\n",
       "      <td>110697</td>\n",
       "      <td>Propos de Nice</td>\n",
       "      <td>audience</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>260059</th>\n",
       "      <td>106470</td>\n",
       "      <td>Tick Tick Tick</td>\n",
       "      <td>audience</td>\n",
       "      <td>57.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283446</th>\n",
       "      <td>116251</td>\n",
       "      <td>Vos Marques  Party</td>\n",
       "      <td>audience</td>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188535</th>\n",
       "      <td>76995</td>\n",
       "      <td>coup sr</td>\n",
       "      <td>audience</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121124</th>\n",
       "      <td>49753</td>\n",
       "      <td>ing</td>\n",
       "      <td>audience</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>121535</th>\n",
       "      <td>49915</td>\n",
       "      <td>ing</td>\n",
       "      <td>audience</td>\n",
       "      <td>86.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        title_id                               title score_type score\n",
       "267876    109796   And They Lived Happily Ever After   audience  71.0\n",
       "617089    109796   And They Lived Happily Ever After     tomato  57.0\n",
       "554612     83925                             Dollars     tomato  86.0\n",
       "205399     83925                             Dollars   audience  49.0\n",
       "269993    110697                      Propos de Nice   audience  74.0\n",
       "260059    106470                      Tick Tick Tick   audience  57.0\n",
       "283446    116251                  Vos Marques  Party   audience  72.0\n",
       "188535     76995                             coup sr   audience  11.0\n",
       "121124     49753                                 ing   audience  86.0\n",
       "121535     49915                                 ing   audience  86.0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score = pd.DataFrame(data=rotten_tomatoes['title_id'].unique(), columns=['title_id'])\n",
    "\n",
    "audience_scores = pd.DataFrame()\n",
    "audience_scores['title_id'] = rotten_tomatoes['title_id']\n",
    "audience_scores['title'] = rotten_tomatoes['title']\n",
    "audience_scores['score_type'] = 'audience'\n",
    "audience_scores['score'] = rotten_tomatoes['audienceScore']\n",
    "\n",
    "tomato_meters = pd.DataFrame()\n",
    "tomato_meters['title_id'] = rotten_tomatoes['title_id']\n",
    "tomato_meters['title'] = rotten_tomatoes['title']\n",
    "tomato_meters['score_type'] = 'tomato'\n",
    "tomato_meters['score'] = rotten_tomatoes['tomatoMeter']\n",
    "\n",
    "score = pd.concat([audience_scores, tomato_meters], ignore_index=True)\n",
    "score.drop_duplicates(subset=['title_id', 'title','score_type','score'], inplace=True)\n",
    "score = score[score[\"score\"] != \"\"]\n",
    "score.sort_values(by=['title']).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5466e6bf",
   "metadata": {},
   "source": [
    "The critic column is created by referencing the score_type column. After that, unnecessary columns are dropped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3e3e7826",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>critic</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>5</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>349231</th>\n",
       "      <td>6</td>\n",
       "      <td>tomatoMeter</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>6</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>7</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>8</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>88.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>10</td>\n",
       "      <td>audienceScore</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>349243</th>\n",
       "      <td>10</td>\n",
       "      <td>tomatoMeter</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        title_id         critic  score\n",
       "0              1  audienceScore   50.0\n",
       "7              3  audienceScore   43.0\n",
       "13             4  audienceScore   60.0\n",
       "15             5  audienceScore   70.0\n",
       "349231         6    tomatoMeter   69.0\n",
       "18             6  audienceScore   65.0\n",
       "27             7  audienceScore   55.0\n",
       "28             8  audienceScore   88.0\n",
       "30            10  audienceScore   74.0\n",
       "349243        10    tomatoMeter   83.0"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score[\"critic\"] = score[\"score_type\"].apply(lambda x: \"audienceScore\" if x == \"audience\" else \"tomatoMeter\" if x == \"tomato\" else \"Others\")\n",
    "score = score[[\"title_id\", \"critic\", \"score\"]]\n",
    "score = score[score[\"score\"] != \" \"]\n",
    "score[\"score\"] = score[\"score\"].astype(float)\n",
    "score.sort_values(by=['title_id']).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dc19e8e",
   "metadata": {},
   "source": [
    "Now, I can merge the data with the critic table to display the correct critic_id corresponding to each entry's critic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "416c109f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_id</th>\n",
       "      <th>critic_id</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   title_id  critic_id  score\n",
       "0         1          1     50\n",
       "1         3          1     43\n",
       "2         4          1     60\n",
       "3         5          1     70\n",
       "4         6          1     65\n",
       "5         7          1     55\n",
       "6         8          1     88\n",
       "7        10          1     74\n",
       "8        11          1     19\n",
       "9        14          1     86"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "score = score.merge(critic, how=\"left\", left_on='critic', right_on='critic')\n",
    "score = score[[\"title_id\", \"critic_id\", \"score\"]]\n",
    "score['score']=score['score'].astype('Int64')\n",
    "score.to_csv(f\"{DATA_PATH}/score.csv\", index=False)\n",
    "score.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2849333b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenvironment",
   "language": "python",
   "name": "myenvironment"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
